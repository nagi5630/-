import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="株価パターン予測", layout="wide")
st.title("📈 株価チャートパターン分析＆将来予測")

# 銘柄入力
code = st.text_input("銘柄コードを入力（例: 7203.T for トヨタ、AAPL for Apple）", "7203.T")

# -----------------------
# パターン検出関数
# -----------------------
def detect_patterns(prices):
    patterns = []
    if len(prices) < 60:
        return patterns

    last30 = prices[-30:]
    max_price = float(last30.max())
    min_price = float(last30.min())
    current = float(last30.iloc[-1])
    avg = float(last30.mean())

    # ダブルトップ
    if abs(current - max_price) / max_price < 0.02:
        patterns.append({"name": "ダブルトップ", "kind": "下降", "target": current * 0.95})

    # ダブルボトム
    elif abs(current - min_price) / min_price < 0.02:
        patterns.append({"name": "ダブルボトム", "kind": "上昇", "target": current * 1.05})

    # 上昇フラッグ
    elif current > avg * 1.05:
        patterns.append({"name": "上昇フラッグ", "kind": "上昇", "target": current * 1.03})

    # 下降フラッグ
    elif current < avg * 0.95:
        patterns.append({"name": "下降フラッグ", "kind": "下降", "target": current * 0.97})

    return patterns

# -----------------------
# 将来予測関数（簡易モデル）
# -----------------------
def forecast_future(data, periods=30):
    recent_trend = data['Close'].pct_change().dropna().mean()  # 平均リターン
    last_price = data['Close'].iloc[-1]
    forecast = [last_price]
    for _ in range(periods):
        forecast.append(forecast[-1] * (1 + recent_trend))
    return forecast

# -----------------------
# メイン処理
# -----------------------
if st.button("解析する"):
    try:
        data = yf.download(code, period="1y", interval="1d")
        if data.empty:
            st.error("データが取得できませんでした。銘柄コードを確認してください。")
            st.stop()

        close_prices = data["Close"]

        # パターン検出
        detected = detect_patterns(close_prices)

        # 将来予測
        future_prices = forecast_future(data)
        future_index = pd.date_range(start=data.index[-1], periods=len(future_prices), freq="D")

        # グラフ描画
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(data.index, close_prices, label="過去の株価", color="blue")
        ax.plot(future_index, future_prices, label="将来予測", linestyle="--", color="orange")

        # 検出パターンをプロット
        if detected:
            for p in detected:
                ax.axhline(p["target"], color="red" if p["kind"] == "下降" else "green",
                           linestyle="--", linewidth=1)
                ax.text(data.index[-1], p["target"],
                        f"{p['name']} → 目標: {p['target']:.2f}",
                        color="red" if p["kind"] == "下降" else "green")

        ax.set_title(f"{code} - 株価と将来予測")
        ax.legend()
        st.pyplot(fig)

        # パターン情報表示
        st.subheader("📊 検出されたパターン")
        if detected:
            for p in detected:
                st.write(f"✅ **{p['name']}** （{p['kind']}トレンド） → 目標価格: {p['target']:.2f}")
        else:
            st.write("該当する明確なパターンは検出されませんでした。")

    except Exception as e:
        st.error(f"エラーが発生しました: {e}")
